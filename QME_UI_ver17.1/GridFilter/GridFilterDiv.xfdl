<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.0">
  <Form id="GridFilterDiv" width="130" height="50" titletext="New Form" onload="GridFilterDiv_onload" onsize="GridFilterDiv_onsize" background="transparent">
    <Layouts>
      <Layout>
        <Combo id="cmb_operater" taborder="0" tabstop="false" innerdataset="@ds_codeOperater" codecolumn="cd" datacolumn="nm" onitemclick="cmb_operater_onitemclick" left="0" top="62" width="95" height="28" background="transparent" text=""/>
        <PopupDiv id="pdiv_combo" text="PopupDiv00" oncloseup="pdiv_combo_oncloseup" left="2" top="131" width="306" height="260" visible="false" border="1px solid darkgreen">
          <Layouts>
            <Layout>
              <Grid id="grd_combo" taborder="0" binddataset="ds_combo" autoenter="select" autoupdatetype="itemselect" selecttype="cell" autofittype="col" left="0" top="0" background="white" border="0px none darkgreen" right="0" bottom="0" onheadclick="pdiv_combo_grd_combo_onheadclick" scrollbartype="auto">
                <Formats>
                  <Format id="default">
                    <Columns>
                      <Column size="30" band="left"/>
                      <Column size="276"/>
                    </Columns>
                    <Rows>
                      <Row size="24" band="head"/>
                      <Row size="24"/>
                    </Rows>
                    <Band id="head">
                      <Cell edittype="checkbox" displaytype="checkboxcontrol"/>
                      <Cell col="1" edittype="text"/>
                    </Band>
                    <Band id="body">
                      <Cell displaytype="checkboxcontrol" edittype="checkbox" text="bind:chk"/>
                      <Cell col="1" text="bind:text" textAlign="left" verticalAlign="middle"/>
                    </Band>
                  </Format>
                </Formats>
              </Grid>
            </Layout>
          </Layouts>
        </PopupDiv>
        <Calendar id="cal_filter" taborder="4" tabstop="false" oncloseup="cal_filter_oncloseup" left="0" top="90" width="94" height="28" borderRadius="0px"/>
        <Button id="btn_filter" taborder="1" tabstop="false" onclick="btn_filter_onclick" left="78" top="16" width="34" height="34" cursor="hand" cssclass="GD_btnAdd_ft01" background="url('imagerc::grd_filter_combo.png') no-repeat center center #f3f7f7"/>
        <Edit id="edt_filter" taborder="2" onsetfocus="edt_filter_onsetfocus" onkillfocus="edt_filter_onkillfocus" onkeydown="edt_filter_onkeydown" left="1" top="17" width="76" height="28" background="rgba(255,255,255,1)" border="1px solid rgba(211,211,211,1)" borderRadius="0px" autoselect="true" onkeyup="edt_filter_onkeyup"/>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="ds_codeOperater" firefirstcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="cd" type="STRING" size="256"/>
          <Column id="nm" type="STRING" size="256"/>
          <Column id="group" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="cd">none</Col>
            <Col id="nm">없음</Col>
            <Col id="group">All</Col>
          </Row>
          <Row>
            <Col id="cd">equal</Col>
            <Col id="nm">=</Col>
            <Col id="group">All</Col>
          </Row>
          <Row>
            <Col id="cd">notEqual</Col>
            <Col id="nm">&lt;&gt;</Col>
            <Col id="group">All</Col>
          </Row>
          <Row>
            <Col id="cd">greaterThan</Col>
            <Col id="nm">&gt;</Col>
            <Col id="group">All</Col>
          </Row>
          <Row>
            <Col id="cd">greaterThanOrEqual</Col>
            <Col id="nm">&gt;=</Col>
            <Col id="group">All</Col>
          </Row>
          <Row>
            <Col id="cd">lessThan</Col>
            <Col id="nm">&lt;</Col>
            <Col id="group">All</Col>
          </Row>
          <Row>
            <Col id="cd">lessThanOrEqual</Col>
            <Col id="nm">&lt;=</Col>
            <Col id="group">All</Col>
          </Row>
          <Row>
            <Col id="cd">startWith</Col>
            <Col id="nm">시작문자</Col>
            <Col id="group">String</Col>
          </Row>
          <Row>
            <Col id="cd">endWith</Col>
            <Col id="nm">종료문자</Col>
            <Col id="group">String</Col>
          </Row>
          <Row>
            <Col id="cd">contains</Col>
            <Col id="nm">포함</Col>
            <Col id="group">String</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="ds_combo" firefirstcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="chk" type="INT" size="256"/>
          <Column id="val" type="STRING" size="256"/>
          <Column id="text" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_distinct" firefirstcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false"/>
    </Objects>
    <Script type="xscript5.1"><![CDATA[/********************************************************************************************
@desc	1. Include
********************************************************************************************/
include "Src_HintsEduLib::All_EduLib.xjs";

// Filter 가능 표시 이미지
this.FILTER_ENABLE_IMAGE_URL = "imagerc::grd_filter_combo.png";
//this.FILTER_ENABLE_IMAGE_URL = "img::img_TreeClose.png";
this.FILTER_ENABLE_IMAGE_SIZE = [30, 30];

// Filter 적용 표시 이미지
this.FILTER_APPLY_IMAGE_URL = "imagerc::grd_filter_check.png";
this.FILTER_APPLY_IMAGE_SIZE = [30, 30];

/*
 * Grid Filter Sample at XPLATFORM
 *
 * Copyright (c) 2014 EcoSystem of TOBESOFT
 * Licensed Free under XPLATFORM.
 */

/**
 * Form onload event handler - 로드시 초기 지정
 * @param {Form} obj 대상 Form Component
 * @param {LoadEventInfo} e LoadEventInfo
 */
this.GridFilterDiv_onload = function (obj:Form, e:nexacro.LoadEventInfo)
{
	var imageSize = this.FILTER_ENABLE_IMAGE_SIZE;

	this.btn_filter.resize(imageSize[0], imageSize[1]);
	this.btn_filter.set_border("0px none #ffffff");
	this.btn_filter.set_background("url('"+this.FILTER_ENABLE_IMAGE_URL+"') no-repeat center center #f3f7f7");
	//URL('imagerc::grd_filter_combo.png')
	//this.FILTER_ENABLE_IMAGE_URL = "imagerc::grd_filter_combo.png";
	this.cmb_operater.set_border("0px none #ffffff");

	this.resizeComps(obj.getOffsetWidth(), obj.getOffsetHeight());
	
	this.ds_distinct.filter("");
	this.ds_combo.filter("");
};

/**
 * Form onsize event handler - 사이즈 변경 시 컴포넌트 위치조정
 * @param {Form} obj 대상 Form Component
 * @param {SizeEventInfo} e SizeEventInfo
 */
this.GridFilterDiv_onsize = function (obj:Form, e:nexacro.SizeEventInfo)
{
	this.resizeComps(e.cx, e.cy);
};

/**
 * 컴포넌트 내용 초기화
 */
this.initValue = function ()
{
	this.edt_filter.set_value("");
	this.btn_filter.set_border("0px none #ffffff");
	this.btn_filter.set_background("url('"+this.FILTER_ENABLE_IMAGE_URL+"') no-repeat center center #f3f7f7");
	this.cmb_operater.set_index(-1);
	this.cal_filter.set_value("");
};

/**
 * 컴포넌트 위치 조정
 * @param {number} formW Form Width
 * @param {number} formH Form Height
 */
this.resizeComps = function (formW, formH)
{
	var l,t,w,h,gap = 2;
	var imageSize = this.FILTER_ENABLE_IMAGE_SIZE;

	l = gap;
	t = gap;
	w = formW - (gap * 2) - imageSize[0];
	h = formH - (gap * 2);

	this.edt_filter.move(l, t, w, h);
	this.cal_filter.move(l, t, w, h);

	l = l + w + gap;
	t = Math.round((formH - imageSize[1]) / 2);

	this.btn_filter.move(l, t);

	l = this.btn_filter.getOffsetLeft();
	t = this.btn_filter.getOffsetTop();
	w = this.btn_filter.getOffsetWidth();
	h = this.btn_filter.getOffsetBottom();

	this.cmb_operater.move(l, t, w, h);
};

/**
 * filter type 별 형태/데이터 지정
 */
this.setFilterType = function ()
{
	var grid = this.parent.grid;		//	trace("grid.name-->"+grid.name);
	var type = this.parent.filterType;	//	trace("type-->"+type);
	var column = this.parent.filterColumn;
	var bodyCellIndex = this.parent.bodyCellIndex;
	var filterData = this.parent.filterData;
	var cellMaskedittype = grid.getCellProperty("body", bodyCellIndex, "maskedittype");
	
	if (type == "combo" || type == "combocontrol") 
	{		
		this.edt_filter.set_visible(false);
		this.cal_filter.set_visible(false);

		var dsName = grid.getCellProperty("body", bodyCellIndex, "combodataset");		
		var ds = this.gfn_Lookup(grid.parent, dsName);	//	trace("ds.name--->"+ds.name);
		var codeColumn = grid.getCellProperty("body", bodyCellIndex, "combocodecol");	
		var dataColumn = grid.getCellProperty("body", bodyCellIndex, "combodatacol");	

		this.ds_combo.set_enableevent(false);
		this.ds_combo.deleteAll();

		var row;
		var defaultVal = this.gfn_isNull(filterData) ? true : false;		//	trace("defaultVal--->"+defaultVal);
		for (var i = 0,len = ds.rowcount; i < len; i++) 
		{
			row = this.ds_combo.addRow();
			this.ds_combo.setColumn(row, "chk", (defaultVal ? 0 : filterData[i]));
			this.ds_combo.setColumn(row, "text", ds.getColumn(i, dataColumn));
			this.ds_combo.setColumn(row, "val", ds.getColumn(i, codeColumn));
		}

		this.ds_combo.set_rowposition(-1);
		this.ds_combo.set_enableevent(true);
	}
	else if (type == "date") 
	{
		this.edt_filter.set_visible(false);
		this.cal_filter.set_visible(true);
	}
	else if (type == "number") 
	{
		this.edt_filter.set_visible(true);
		this.cal_filter.set_visible(false);
		this.edt_filter.set_inputtype("number");
	}
	else 
	{
		this.edt_filter.set_visible(true);
		this.cal_filter.set_visible(false);
		this.edt_filter.set_inputtype("normal");
	}
};

/**
 * onkeydown Event Handler
 * @param {Edit} obj Event가 발생한 Edit Component
 * @param {KeyEventInfo} e KeyEventInfo
 */
this.edt_filter_onkeydown = function (obj:Edit, e:nexacro.KeyEventInfo)
{
	if (e.keycode == 13) 
	{
		this.applyFilter(this.cmb_operater.value, obj.value, obj.value);
	}
};

/**
 * onsetfocus Event Handler
 * @param {Edit} obj Event가 발생한 Edit Component
 * @param {SetFocusEventInfo} e SetFocusEventInfo
 */
this.edt_filter_onsetfocus = function (obj:Edit, e:nexacro.SetFocusEventInfo)
{
	obj.focusValue = obj.value;
};

/**
 * onkillfocus Event Handler
 * @param {Edit} obj Event가 발생한 Edit Component
 * @param {KillFocusEventInfo} e KillFocusEventInfo
 */
this.edt_filter_onkillfocus = function (obj:Edit, e:nexacro.KillFocusEventInfo)
{
	if (obj.focusValue != obj.value) 
	{
		this.applyFilter(this.cmb_operater.value, obj.value, obj.value);
	}
};

/**
 * onclick Event Handler
 * @param {Button} obj Event가 발생한 Button Component
 * @param {ClickEventInfo} e ClickEventInfo
 */
this.btn_filter_onclick = function (obj:Button, e:nexacro.ClickEventInfo)
{
	var grid = this.parent.grid;
	var type = this.parent.filterType;
	var bodyCellIndex = this.parent.bodyCellIndex;
	var cellMaskedittype = grid.getCellProperty("body", bodyCellIndex, "maskedittype");

	if (type == "normal") 
	{
// 		{	//	오퍼레이터 버젼
// 			this.ds_codeOperater.filter("");
// 			this.cmb_operater.dropdown();
// 		}
		
		{	//	텍스트Disctinct체크버젼
		
			this.edt_filter.set_visible(true);
			this.cal_filter.set_visible(false);
			this.edt_filter.set_inputtype("normal");
			
			var filterData = this.parent.filterData;

			var ds = this.gfn_Lookup(grid.parent, grid.binddataset);	//	trace("ds.name--->"+ds.name);
			var bindColNm = grid.getCellProperty("body", bodyCellIndex, "text").replace("bind:",""); //	trace("bindColNm---->"+bindColNm);

			var cFilterStr = ds.filterstr;			//	trace("filterstr--->"+ds.filterstr );

			////////////////////////////////////////////
			this.ds_distinct.set_enableevent(false);
			ds.set_enableevent(false);
			////////////////////////////////////////////
			
			this.ds_distinct.filter("");
			this.ds_distinct.clearData();	
			//	필터된 컬럼이면 전체를 보여줌 , 아니면 필터 내에서만 보여줌
			this.ds_distinct.copyData(ds, ( cFilterStr.indexOf(bindColNm+"==") > -1 ? false : true ));
			
			//	중복제거 가져오기
			this.gfn_distincDsFilter(this.ds_distinct, bindColNm);

			////////////////////////////////////////////
			this.ds_distinct.set_enableevent(true);
			ds.set_enableevent(true);
			////////////////////////////////////////////
			
			this.ds_combo.set_enableevent(false);
			this.ds_combo.deleteAll();

			for (var i = 0,len = this.ds_distinct.rowcount; i < len; i++) 
			{
				var row = this.ds_combo.addRow();
				var colVal = this.ds_distinct.getColumn(i, bindColNm);
				var isCheckedStr = bindColNm+"=="+nexacro.wrapQuote(colVal); //	trace("isCheckedStr--->"+isCheckedStr);
									//	this.ds_combo.setColumn(row, "chk", (defaultVal ? 0 : filterData[i]));
									//	trace("cFilterStr.indexOf(isCheckedStr---->"+cFilterStr.indexOf(isCheckedStr));
				//해당값에 필터가 걸려 있다면 체크표시
				this.ds_combo.setColumn(row, "chk", (cFilterStr.indexOf(isCheckedStr) > -1 ? "1":"0"));
				this.ds_combo.setColumn(row, "text", colVal);
				this.ds_combo.setColumn(row, "val", colVal);
			}
			
			this.ds_combo.set_keystring("S:text");
			this.ds_combo.set_rowposition(-1);
			this.ds_combo.set_enableevent(true);
						
			var imageSize = this.FILTER_ENABLE_IMAGE_SIZE;
			var x = e.clientx + grid.getOffsetLeft() + 1050 - this.parent.posX;
			var y = e.clienty + grid.getOffsetTop() + 165;

			var z = parseInt(this.getOffsetWidth() + 1);
			var nNum = nexacro.round(0.76 * z);

			//	this.pdiv_combo.set_width(z);
			this.pdiv_combo.set_width(300);
			this.pdiv_combo.trackPopupByComponent(obj, -nNum, 22);
		}
	}
	else if (type == "number" || type == "date") 
	{
		this.ds_codeOperater.filter("group != 'String'");
		this.cmb_operater.dropdown();
	}
	else if (type == "combo" || type == "combocontrol") 
	{
		var imageSize = this.FILTER_ENABLE_IMAGE_SIZE;
		var x = e.clientx + grid.getOffsetLeft() + 1050 - this.parent.posX;
		var y = e.clienty + grid.getOffsetTop() + 165;

		var z = parseInt(this.getOffsetWidth() + 1);
		var nNum = nexacro.round(0.76 * z);

		//	this.pdiv_combo.set_width(z);
		this.pdiv_combo.set_width(300);
		this.pdiv_combo.trackPopupByComponent(obj, -nNum, 22);
	}
};

/**
 * onitemclick Event Handler
 * @param {Combo} obj Event가 발생한 Combo Component
 * @param {ListBoxClickEventInfo} e ListBoxClickEventInfo
 */
this.cmb_operater_onitemclick = function (obj:Combo, e:nexacro.ListBoxClickEventInfo)
{
	var value;
	var type = this.parent.filterType;
	var grid = this.parent.grid;		//	trace("grid.name-->"+grid.name);
	var bodyCellIndex = this.parent.bodyCellIndex;
	var cellMaskedittype = grid.getCellProperty("body", bodyCellIndex, "maskedittype");

	if (type == "normal") 
	{
		value = this.edt_filter.value;
	}
	else if (type == "number") 
	{
		value = parseInt(this.edt_filter.value);
	}
	else if (type == "date") 
	{
		value = this.cal_filter.value;
	}
	
	this.applyFilter(e.itemvalue, value, value);
};

/**
 * oncloseup Event Handler
 * @param {Calendar} obj Event가 발생한 Calendar Component
 * @param {CalendarCloseUpEventInfo} e CalendarCloseUpEventInfo
 */
this.cal_filter_oncloseup = function (obj:Calendar, e:nexacro.CalendarCloseUpEventInfo)
{
	if (e.prevalue != e.postvalue) 
	{
		this.applyFilter(this.cmb_operater.value, e.postvalue, e.postvalue);
	}
};

/**
 * oncloseup Event Handler
 * @param {PopupDiv} obj Event가 발생한 PopupDiv Component
 * @param {EventInfo} e EventInfo
 */
this.pdiv_combo_oncloseup = function (obj:PopupDiv, e:nexacro.EventInfo)
{
	var value = [];
	var cnt = this.ds_combo.rowcount;
	var chk = 0;
	var filterData = [];
	for (var i = 0; i < cnt; i++) 
	{
		if (this.ds_combo.getColumn(i, "chk") == 1) 
		{
			chk += 1;
			value.push(this.ds_combo.getColumn(i, "val"));
		}
		filterData.push(this.ds_combo.getColumn(i, "chk"));
	}
	if (chk == cnt) 
	{
		value = [];
	}

	this.applyFilter("equal", value, filterData);
};

/**
 * 필터 적용
 * @param {string} operater 연산자
 * @param {string} value 비교값
 */
this.applyFilter = function (operater, value, filterData)
{
	var grid = this.parent.grid;
	var column = this.parent.filterColumn;
	var headCellIndex = this.parent.headCellIndex;

	var ds = this.gfn_Lookup(grid.parent, grid.binddataset);
	var colType = ds.getColumnInfo(column).type;
	var filterString = "";
	var str = "";
	
	// filter string 생성
	if (!this.gfn_isNull(value)) 
	{
		//if (!this.gfn_IsArray(value)) 
		if(Object.prototype.toString.call( value ) != '[object Array]')
		{
			value = [value];
		}
		
		var val;
		for (var i = 0,len = value.length; i < len; i++) 
		{
			val = value[i];
			if (!this.gfn_isNull(operater)) 
			{
				if (!this.gfn_isNull(filterString)) 
				{
					filterString += " || ";
				}
				filterString += column;

				switch (operater) 
				{
					case 'equal':
						str = "==" + (colType == "STRING" ? nexacro.wrapQuote(val) : val);
						break;
					case 'notEqual':
						str = "!=" + (colType == "STRING" ? nexacro.wrapQuote(val) : val);
						break;
					case 'greaterThan':
						str = ">" + (colType == "STRING" ? nexacro.wrapQuote(val) : val);
						break;
					case 'greaterThanOrEqual':
						str = ">=" + (colType == "STRING" ? nexacro.wrapQuote(val) : val);
						break;
					case 'lessThan':
						str = "<" + (colType == "STRING" ? nexacro.wrapQuote(val) : val);
						break;
					case 'lessThanOrEqual':
						str = "<=" + (colType == "STRING" ? nexacro.wrapQuote(val) : val);
						break;
					case 'startWith':
						str = ".toString().substr(0, " + val.length + ") == '" + val + "'";
						break;
					case 'endWith':
						str = ".toString().substr(" + column + ".toString().length-" + val.length + ") == '" + val + "'";
						break;
					case 'contains':
						str = ".toString().search('" + val + "') > -1";
						break;
				}

				filterString += str;
			}
		}
	}

	// 필터 표시 이미지 변경
	if (this.gfn_isNull(filterString)) 
	{
		this.btn_filter.set_background("url('"+this.FILTER_ENABLE_IMAGE_URL+"') no-repeat center center #f3f7f7");
	}
	else 
	{
		filterString = "(" + filterString + ")";
		this.btn_filter.set_background("url('"+this.FILTER_APPLY_IMAGE_URL+"') no-repeat center center #f3f7f7");
	}
	
	// 필터 실행
	//	this.parent.parent.executeFilter(grid, headCellIndex, filterString, filterData);
	this.executeFilter(grid, headCellIndex, filterString, filterData);
};



/**
 * 주어진 대상을 포함한 상위 범위로 지정된 이름에 최초로 일치하는 component, object 반환
 * @public
 * @param {xpComp} p 찾을 대상
 * @param {string} name 찾을 대상 이름
 * @return {xpComp} 검색된 component, object
 * @example
 *
 * // this = Form
 * // Form 에 Button11 존재
 * trace(Base.XPComp.lookup(this, "Button11"));	// output : [object Button]
 *
 * // Button12 는 Div01 에 존재하지 않으나 Div01 의 상위 컴포넌트인 Form 에 존재
 * trace(Base.XPComp.lookup(Div01, "Button11"));	// output : [object Button]
 *
 * @memberOf Base.XPComp
 */
this.gfn_Lookup = function (p, name)
{
	var o;
	while (p) 
	{
		o = p.components;
		if (o && o[name]) 
		{
			return o[name];
		}

		o = p.objects;
		if (o && o[name]) 
		{
			return o[name];
		}

		p = p.parent;
	}
	return null;
};

this.pdiv_combo_grd_combo_onheadclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	if(e.col==0){
		var iChkRp = this.ds_combo.findRow("chk","1");
		var iChk;
		if(iChkRp > -1){iChk="0";}
		else{iChk="1";}
		for(var i = 0 ; i < this.ds_combo.rowcount ; i++){
			this.ds_combo.setColumn(i, "chk", iChk);
		}
	}
};

this.edt_filter_onkeyup = function(obj:nexacro.Edit,e:nexacro.KeyEventInfo)
{
	//	this.dsList.filter("String(Column0).indexOf('" + obj.text + "') >= 0");
	
 	if(!this.gfn_isNull(obj.text))
 	{
		var grid = this.parent.grid;
		var column = this.parent.filterColumn;
		var headCellIndex = this.parent.headCellIndex;
		var filterStr = "String("+column+").indexOf('" + obj.text + "') >= 0"
		var filterData = this.parent.filterData;
		this.executeFilter(grid, headCellIndex, filterStr, filterData);
	}
};
]]></Script>
  </Form>
</FDL>
